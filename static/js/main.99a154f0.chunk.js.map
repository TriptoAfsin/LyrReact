{"version":3,"sources":["components/img/spinner1.gif","components/layout/NavBar.js","context.js","components/layout/Spinner.js","components/tracks/Track.js","components/tracks/Tracks.js","components/tracks/Search.js","components/layout/Index.js","components/tracks/Lyrics.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","className","Context","React","createContext","reducer","state","action","type","track_list","payload","heading","loading","Provider","track","track_name","dispatch","setState","process","fetch","response","json","data","console","log","this","message","body","value","props","children","Component","Consumer","Spinner","src","spinner","style","styles","alt","width","margin","display","icon","marginRight","marginTop","Track","artist_name","album_name","to","track_id","Tracks","trackTitle","Fragment","map","item","key","Search","onChangeField","e","target","name","findTrack","preventDefault","swal","axios","get","then","res","catch","err","onSubmit","bind","placeholder","onChange","button","color","backgroundColor","border","Index","Lyrics","lyrics","apiKey","cors","url","match","params","id","response2","dataTrack","lyrics_body","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,sC,4MCY5BC,MAVf,WACI,OACI,yBAAKC,UAAU,mCACX,0BAAMA,UAAU,gCAAhB,c,8DCFNC,EAAUC,IAAMC,gBAEhBC,EAAU,SAACC,EAAOC,GACpB,OAAOA,EAAOC,MACV,IAAK,gBACD,OAAO,2BACAF,GADP,IAEIG,WAAYF,EAAOG,QACnBC,QAAQ,iBACRC,SAAS,IAEb,QACI,OAAON,IAIVO,EAAb,4MAEIP,MAAQ,CACJG,WAAY,CACR,CAACK,MAAO,CACJC,WAAY,KAEhB,CAACD,MAAO,CACJC,WAAY,MAGpBJ,QAAS,GACTC,SAAS,EACTI,SAAU,SAAAT,GAAM,OAAI,EAAKU,UAAS,SAAAX,GAAK,OAAID,EAAQC,EAAOC,QAblE,0LAkBuBW,mCACF,uCACD,qCApBpB,SAqB+BC,MAAM,GAAD,OAFf,wCAEe,OADhB,qCACgB,iGAHbD,qCAlBvB,cAqBcE,EArBd,gBAsB2BA,EAASC,OAtBpC,OAsBcC,EAtBd,OAuBQC,QAAQC,IAAIF,GACZG,KAAKR,SAAS,CACVR,WAAYa,EAAKI,QAAQC,KAAKlB,WAC9BE,QAAS,gBACTC,SAAS,IA3BrB,sIAgCQ,OACI,kBAACV,EAAQW,SAAT,CAAkBe,MAAOH,KAAKnB,OACzBmB,KAAKI,MAAMC,cAlC5B,GAA8BC,aAwCjBC,EAAW9B,EAAQ8B,S,iBCxDnBC,EAAb,uKAEQ,OACI,6BACI,yBAAKC,IAAKC,IAASC,MAAOC,EAAOF,QAASG,IAAI,oBAJ9D,GAA6BP,aASvBM,EAAS,CACXF,QAAS,CACLI,MAAO,OACPC,OAAQ,YACRC,QAAS,UAIFR,ICCf,IAAMI,EAAS,CACXK,KAAM,CACFC,YAAa,SACbC,UAAW,WAIJC,EAzBf,SAAehB,GAAQ,IACZf,EAASe,EAATf,MAEP,OAEI,yBAAKb,UAAU,YACX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,aACX,4BAAI,2BAAIa,EAAMC,aACd,4BAAI,uBAAGd,UAAU,cAAcmC,MAAOC,EAAOK,OAAU,wCAAiB5B,EAAMgC,aAC9E,4BAAI,uBAAG7C,UAAU,sBAAsBmC,MAAOC,EAAOK,OAAU,uCAAgB5B,EAAMiC,YACrF,kBAAC,IAAD,CAAMC,GAAE,uBAAkBlC,EAAMmC,UAAYhD,UAAU,0BAAyB,uBAAGA,UAAU,uBAAuBmC,MAAOC,EAAOK,OAAjI,oBCuBLQ,E,uKA9BP,OACG,kBAAClB,EAAD,MACK,SAAAJ,GAAU,IACCnB,EAA6CmB,EAA7CnB,WAAYE,EAAiCiB,EAAjCjB,QAASC,EAAwBgB,EAAxBhB,QAAwBgB,EAAfuB,WACtC,OAAGvC,EAEM,6BACI,kBAAC,EAAD,MACA,wBAAIX,UAAU,oBAAd,mBAMR,kBAAC,IAAMmD,SAAP,KACI,wBAAInD,UAAU,oBAAoBU,GAClC,yBAAKV,UAAU,OACVQ,EAAW4C,KAAI,SAAAC,GAAI,OAChB,kBAAC,EAAD,CAAOxC,MAAOwC,EAAKxC,MAAOyC,IAAKD,EAAKxC,MAAMmC,uB,GApBzDlB,a,kDCIfyB,E,4MAEFlD,MAAQ,CACJ6C,WAAY,GACZvC,SAAS,G,EAGb6C,cAAgB,SAAAC,GACZ,EAAKzC,SAAL,eACKyC,EAAEC,OAAOC,KAAOF,EAAEC,OAAO/B,S,EAOlCiC,UAAY,SAAC7C,EAAU0C,GACnBA,EAAEI,iBADuB,MAGK,EAAKxD,MAA5B6C,EAHkB,EAGlBA,WAHkB,EAGNvC,QAEnB,GAAkB,KAAfuC,GAAoC,OAAfA,EACpBY,IAAK,qBAAsB,4BAG3B,CACA,EAAK9C,SAAS,CACVL,SAAS,IASboD,IAAMC,IAAN,UAHa,wCAGb,OAFY,qCAEZ,gCAA+Cd,EAA/C,2DAJejC,qCAKFgD,MAAK,SAAAC,GACF5C,QAAQC,IAAI2C,EAAI7C,MAChBN,EAAS,CACLR,KAAM,gBACNE,QAASyD,EAAI7C,KAAKI,QAAQC,KAAKlB,aAEnC,EAAKQ,SAAS,CACVkC,WAAY,GACZvC,SAAS,OAEdwD,OAAM,SAAAC,GAAG,OAAI9C,QAAQC,IAAI6C,MAE7C9C,QAAQC,IAAI,kB,uDAIL,IAAD,SACyBC,KAAKnB,MAA5B6C,EADF,EACEA,WAEP,OAHK,EACcvC,QAIX,6BACI,kBAAC,EAAD,MACA,wBAAIX,UAAU,oBAAd,mBAOJ,kBAAC+B,EAAD,MAEQ,SAAAJ,GACIL,QAAQC,IAAII,GADP,IAEEZ,EAAYY,EAAZZ,SACP,OACI,yBAAKf,UAAU,0BACX,wBAAIA,UAAU,eACV,uBAAGA,UAAU,eAAemC,MAAOC,EAAOK,OAD9C,qBAGA,uBAAGzC,UAAU,oBAAb,kBACA,0BAAMqE,SAAU,EAAKT,UAAUU,KAAK,EAAMvD,IACtC,yBAAKf,UAAU,cACX,2BAAOA,UAAU,+BACjBuE,YAAY,uBACZZ,KAAK,aACLhC,MAAOuB,EACPsB,SAAU,EAAKhB,iBAGnB,4BAAQxD,UAAU,gDAAgDO,KAAK,SAAS4B,MAAOC,EAAOqC,QAA9F,mB,GAvFnB3C,aAmGfM,EAAS,CACXK,KAAM,CACFC,YAAa,SACbC,UAAW,UAGf8B,OAAQ,CACJC,MAAO,QACPC,gBAAiB,UACjBC,OAAQ,SAMDrB,IC9GAsB,MATf,WACI,OACI,kBAAC,IAAM1B,SAAP,KACI,kBAAC,EAAD,MACA,kBAAC,EAAD,QC2DG2B,E,4MA7DXzE,MAAQ,CACJQ,MAAO,GAGPkE,OAAQ,GAGRpE,SAAS,G,qMAIHqE,EAAS/D,mCACTgE,EAAO,uCACPC,EAAM,qC,SACWhE,MAAM,GAAD,OAAI+D,GAAJ,OAAWC,EAAX,sCAA4C1D,KAAKI,MAAMuD,MAAMC,OAAOC,GAApE,mBAAiFL,I,cAAvG7D,E,gBACkBD,MAAM,GAAD,OAAI+D,GAAJ,OAAWC,EAAX,+BAAqC1D,KAAKI,MAAMuD,MAAMC,OAAOC,GAA7D,mBAA0EL,I,cAAjGM,E,iBACanE,EAASC,O,eAAtBC,E,iBACkBiE,EAAUlE,O,QAA5BmE,E,OACNjE,QAAQC,IAAIF,GACZC,QAAQC,IAAIgE,GACZ/D,KAAKR,SAAS,CACV+D,OAAQ1D,EAAKI,QAAQC,KAAKqD,OAC1BlE,MAAO0E,EAAU9D,QAAQC,KAAKb,MAC9BF,SAAS,I,sIAMP,IAAD,EAC4Ba,KAAKnB,MAA/BM,EADF,EACEA,QAASE,EADX,EACWA,MAAOkE,EADlB,EACkBA,OAEvB,OAAGpE,EAEK,6BACI,kBAAC,EAAD,MACA,wBAAIX,UAAU,oBAAd,mBAMJ,kBAAC,IAAMmD,SAAP,KACI,kBAAC,IAAD,CAAMJ,GAAG,IAAI/C,UAAU,2BAAvB,QACC,6BACG,4BAAI,0CAAJ,IAAwBa,EAAMC,YAC9B,4BAAI,sCAAJ,IAAoBD,EAAMiC,YAC1B,4BAAI,uCAAJ,IAAqBjC,EAAMgC,aAE3B,6BACA,sCAAe,6BACf,4BAAKkC,EAAOS,mB,GArDf1D,aCwBN2D,MAlBf,WACE,OACE,kBAAC,EAAD,KACA,kBAAC,IAAD,KACG,kBAAC,IAAMtC,SAAP,KACC,kBAAC,EAAD,MACE,yBAAKnD,UAAU,aACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO0F,OAAK,EAACC,KAAK,aAAaC,UAAWf,IAC1C,kBAAC,IAAD,CAAOa,OAAK,EAACC,KAAK,oBAAoBC,UAAWd,UCP3Ce,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASb,MACvB,2DCZNc,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdvC,OAAM,SAAAwC,GACLrF,QAAQqF,MAAMA,EAAMlF,c","file":"static/js/main.99a154f0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner1.3bd3d6a5.gif\";","import React from 'react'\r\n\r\nfunction NavBar() {\r\n    return (\r\n        <nav className=\"navbar navbar-dark bg-dark mb-5\">\r\n            <span className=\"navbar-brand mb-0 h1 mx-auto\">\r\n                LyrReact\r\n            </span>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default NavBar\r\n","import React, { Component } from 'react'\r\n\r\n\r\nconst Context = React.createContext();\r\n\r\nconst reducer = (state, action) => {\r\n    switch(action.type){\r\n        case 'SEARCH_TRACKS':\r\n            return {\r\n                ...state,\r\n                track_list: action.payload,\r\n                heading: `Search Results`,\r\n                loading: false\r\n            }\r\n            default:\r\n                return state;\r\n    }\r\n}\r\n\r\nexport class Provider extends Component {\r\n\r\n    state = {\r\n        track_list: [\r\n            {track: {\r\n                track_name: ''\r\n            }},\r\n            {track: {\r\n                track_name: ''\r\n            }}\r\n        ],\r\n        heading: '',\r\n        loading: true,\r\n        dispatch: action => this.setState(state => reducer(state, action))\r\n    }\r\n\r\n\r\n    async componentDidMount(){\r\n        const apiKey = process.env.REACT_APP_MM_KEY;\r\n        const cors = 'https://cors-anywhere.herokuapp.com/' //this thing is required for this api\r\n        const url = \"https://api.musixmatch.com/ws/1.1/\";\r\n        const response = await fetch(`${cors}${url}/chart.tracks.get?chart_name=top&page=1&page_size=10&country=us&f_has_lyrics=1&apikey=${apiKey}`); //asynch requires await\r\n        const data = await response.json();\r\n        console.log(data);\r\n        this.setState({\r\n            track_list: data.message.body.track_list,\r\n            heading: 'Top 10 Tracks',\r\n            loading: false\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Context.Provider value={this.state}>\r\n                {this.props.children}\r\n            </Context.Provider>\r\n        )\r\n    }\r\n}\r\n\r\nexport const Consumer = Context.Consumer\r\n","import React, { Component } from 'react'\r\nimport spinner from '../img/spinner1.gif'\r\n\r\nexport class Spinner extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <img src={spinner} style={styles.spinner} alt=\"Loading...\"></img>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst styles = {\r\n    spinner: {\r\n        width: '80px',\r\n        margin: '40px auto',\r\n        display: 'block'\r\n    }\r\n}\r\n\r\nexport default Spinner\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nfunction Track(props) {\r\n    const {track} = props;\r\n\r\n    return (\r\n\r\n        <div className=\"col-md-6\" >\r\n            <div className=\"card mb-4 shadow-sm\">\r\n                <div className=\"card-body\">\r\n                    <h5><b>{track.track_name}</b></h5>\r\n                    <h6><i className=\"fas fa-user\" style={styles.icon}></i><b> Artist: </b>{track.artist_name}</h6>\r\n                    <h6><i className=\"fas fa-compact-disc\" style={styles.icon}></i><b> Album: </b>{track.album_name}</h6>\r\n                    <Link to={`lyrics/track/${track.track_id}`} className=\"btn btn-dark btn-block\"><i className=\"fas fa-chevron-right\" style={styles.icon}></i> View Lyrics</Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst styles = {\r\n    icon: {\r\n        marginRight: '0.5rem',\r\n        marginTop: '0.5rem'\r\n    }\r\n}\r\n\r\nexport default Track\r\n","import React, { Component } from 'react'\r\nimport { Consumer } from '../../context'\r\nimport Spinner from '../layout/Spinner'\r\nimport Track from './Track'\r\n\r\nclass Tracks extends Component {\r\n    render() {\r\n        return (\r\n           <Consumer>\r\n               {value => {\r\n                   const { track_list, heading, loading, trackTitle } = value;\r\n                   if(loading){\r\n                        return (\r\n                            <div>\r\n                                <Spinner></Spinner>\r\n                                <h3 className=\"text-center mb-4\">Please Wait...</h3>\r\n                            </div>\r\n                        )\r\n                   }\r\n                   else{\r\n                    return (\r\n                        <React.Fragment>\r\n                            <h2 className=\"text-center mb-4\">{heading}</h2>\r\n                            <div className=\"row\">\r\n                                {track_list.map(item => (\r\n                                    <Track track={item.track} key={item.track.track_id}></Track>\r\n                                ))}\r\n                            </div>\r\n                        </React.Fragment>\r\n                    )\r\n                   }\r\n               }}\r\n           </Consumer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Tracks\r\n","import React, { Component } from 'react'\r\nimport { Consumer } from '../../context'\r\nimport './customStyles.css'\r\nimport axios from 'axios'\r\nimport swal from 'sweetalert';\r\nimport Spinner from '../layout/Spinner'\r\n\r\n\r\n\r\nclass Search extends Component {\r\n\r\n    state = {\r\n        trackTitle: '',\r\n        loading: false,\r\n    }\r\n\r\n    onChangeField = e => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n   \r\n\r\n\r\n    findTrack = (dispatch, e) => {\r\n        e.preventDefault();\r\n\r\n        const {trackTitle, loading} = this.state;\r\n\r\n        if(trackTitle === '' || trackTitle === null){\r\n            swal(\"Empty Search Field\", \"search by track name\");\r\n        }\r\n\r\n        else{\r\n            this.setState({\r\n                loading: true\r\n            })\r\n    \r\n    \r\n           \r\n            const apiKey = process.env.REACT_APP_MM_KEY;\r\n            const cors = 'https://cors-anywhere.herokuapp.com/' //this thing is required for this api\r\n            const url = \"https://api.musixmatch.com/ws/1.1/\";\r\n    \r\n            axios.get(`${cors}${url}track.search?q_track=${trackTitle}&page_size=10&page=1&s_track_rating=desc&apikey=${apiKey}`)\r\n                        .then(res => {\r\n                            console.log(res.data);\r\n                            dispatch({\r\n                                type: 'SEARCH_TRACKS',\r\n                                payload: res.data.message.body.track_list\r\n                            });\r\n                            this.setState({\r\n                                trackTitle: '',\r\n                                loading: false\r\n                            })\r\n                        }).catch(err => console.log(err));\r\n        }\r\n       console.log(\"Submit called\");\r\n    }\r\n\r\n\r\n    render() {\r\n        const {trackTitle, loading} = this.state;\r\n\r\n        if(loading){\r\n            return (\r\n                <div>\r\n                    <Spinner></Spinner>\r\n                    <h3 className=\"text-center mb-4\">Please Wait...</h3>\r\n                    \r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                <Consumer >\r\n                    {\r\n                        value => {\r\n                            console.log(value);\r\n                            const {dispatch} = value;\r\n                            return (\r\n                                <div className=\"card card-body mb-4 p4\">\r\n                                    <h1 className=\"text-center\">\r\n                                        <i className=\"fas fa-music\" style={styles.icon}></i>Search For a Song\r\n                                    </h1>\r\n                                    <p className=\"lead text-center\"> Search Lyrics</p>\r\n                                    <form onSubmit={this.findTrack.bind(this, dispatch)}>\r\n                                        <div className=\"form-group\">\r\n                                            <input className=\"form-control form-control-lg\" \r\n                                            placeholder=\"Search by Song Title\" \r\n                                            name=\"trackTitle\" \r\n                                            value={trackTitle}\r\n                                            onChange={this.onChangeField}\r\n                                            ></input>\r\n                                        </div>\r\n                                        <button className=\"btn my-primary-btn btn-lg btn-block mt-2 mb-4\" type=\"submit\" style={styles.button}>Search</button>\r\n                                    </form>\r\n                                </div>\r\n                            )\r\n                        }\r\n                    }\r\n                </Consumer>\r\n            )\r\n        } \r\n    }\r\n}\r\n\r\nconst styles = {\r\n    icon: {\r\n        marginRight: '0.5rem',\r\n        marginTop: '0.5rem'\r\n    },\r\n    \r\n    button: {\r\n        color: \"white\",\r\n        backgroundColor: \"#2bb640\",\r\n        border: \"none\"\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Search\r\n","import React from 'react'\r\nimport Tracks from '../tracks/Tracks'\r\nimport Search from '../tracks/Search'\r\n\r\nfunction Index() {\r\n    return (\r\n        <React.Fragment>\r\n            <Search></Search>\r\n            <Tracks></Tracks>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Index\r\n","import React, { Component } from 'react'\r\nimport Spinner from '../layout/Spinner'\r\nimport { Link } from 'react-router-dom'\r\n\r\nclass Lyrics extends Component {\r\n\r\n    state = {\r\n        track: {\r\n\r\n        },\r\n        lyrics: {\r\n\r\n        },\r\n        loading: true\r\n    }\r\n\r\n    async componentDidMount(){\r\n        const apiKey = process.env.REACT_APP_MM_KEY;\r\n        const cors = 'https://cors-anywhere.herokuapp.com/' //this thing is required for this api\r\n        const url = \"https://api.musixmatch.com/ws/1.1/\";\r\n        const response = await fetch(`${cors}${url}/track.lyrics.get?track_id=${this.props.match.params.id}&apikey=${apiKey}`); //asynch requires await\r\n        const response2 = await fetch(`${cors}${url}/track.get?track_id=${this.props.match.params.id}&apikey=${apiKey}`); //asynch requires await\r\n        const data = await response.json();\r\n        const dataTrack = await response2.json();\r\n        console.log(data);\r\n        console.log(dataTrack);\r\n        this.setState({\r\n            lyrics: data.message.body.lyrics, \r\n            track: dataTrack.message.body.track,\r\n            loading: false\r\n        })\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        const {loading, track, lyrics} = this.state\r\n\r\n        if(loading){\r\n            return (\r\n                <div>\r\n                    <Spinner></Spinner>\r\n                    <h3 className=\"text-center mb-4\">Please Wait...</h3>\r\n                </div>\r\n            )\r\n        }\r\n        else{\r\n            return (\r\n                <React.Fragment>\r\n                    <Link to=\"/\" className=\"btn btn-dark btn-m mb-4\">Back</Link>\r\n                     <div >\r\n                        <h4><b>Track Name:</b> {track.track_name}</h4>\r\n                        <h4><b>Album: </b> {track.album_name}</h4>\r\n                        <h4><b>Artist: </b> {track.artist_name}</h4>\r\n                        \r\n                        <br></br>\r\n                        <h1>Lyrics</h1><br></br>\r\n                        <h4>{lyrics.lyrics_body}</h4>\r\n                    </div>\r\n                </React.Fragment>\r\n            )\r\n        }\r\n\r\n        \r\n    }\r\n}\r\n\r\nexport default Lyrics\r\n","import React from 'react';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom'\nimport './App.css';\nimport NavBar from './components/layout/NavBar'\nimport Index from './components/layout/Index'\nimport Lyrics from './components/tracks/Lyrics'\nimport {Provider} from './context'\n\n\n\nfunction App() {\n  return (\n    <Provider>\n    <Router>\n       <React.Fragment>\n        <NavBar></NavBar>\n          <div className=\"container\">\n            <Switch>\n              <Route exact path=\"/LyrReact/\" component={Index}></Route>\n              <Route exact path=\"/lyrics/track/:id\" component={Lyrics}></Route>\n            </Switch>\n          </div>\n      </React.Fragment>\n    </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}